!pip install pandas
!pip install scikit-learn
!pip install keras
!pip install tensorflow
!pip install tensorflow-keras
!pip install sklearn.model_selection
!pip install sklearn.preprocessing
!pip install keras-wrappers-scikit-learn
!pip install scikeras
!pip install sklearn-keras


import numpy as np
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Example data
X = np.random.rand(100, 10)  # 100 samples, 10 features
y = np.random.rand(100)      # 100 target values

def create_model(input_dim):
    model = Sequential()
    model.add(Dense(64, input_dim=input_dim, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1))  # Single output for regression
    model.compile(optimizer='adam', loss='mse')
    return model
kfold = KFold(n_splits=5, shuffle=True, random_state=42)
mse_scores = []
for train_index, test_index in kfold.split(X):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y[train_index], y[test_index]

    # Standardize the data
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Create and train the model
    model = create_model(X_train.shape[1])
    model.fit(X_train, y_train, epochs=50, batch_size=10, verbose=0)

    # Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mse_scores.append(mse)
print("1_Vaishnavi Boga")
print("MSE scores for each fold: ", mse_scores)
print("Mean MSE: ", np.mean(mse_scores))
print("Standard Deviation of MSE: ", np.std(mse_scores))