import numpy as np
import pandas as pd
from sklearn.model_selection import KFold
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical

# Load the dataset
data = pd.read_csv('iris.csv')

# Assume 'species' is the target variable
X = data.drop('species', axis=1).values
y = data['species'].values

# Encode the target variable
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Convert labels to one-hot encoding
y_categorical = to_categorical(y_encoded)

# Define the model creation function
def create_model(input_dim, num_classes):
    model = Sequential()
    model.add(Dense(64, input_dim=input_dim, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(num_classes, activation='softmax'))  # Softmax for multiclass classification
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

# Set up KFold cross-validation
kfold = KFold(n_splits=5, shuffle=True, random_state=42)
accuracy_scores = []

for train_index, test_index in kfold.split(X):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y_categorical[train_index], y_categorical[test_index]

    # Standardize the data
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Create and train the model
    model = create_model(X_train.shape[1], y_categorical.shape[1])
    model.fit(X_train, y_train, epochs=50, batch_size=10, verbose=0)

    # Evaluate the model
    y_pred = model.predict(X_test)
    y_pred_classes = np.argmax(y_pred, axis=1)
    y_test_classes = np.argmax(y_test, axis=1)
    accuracy = accuracy_score(y_test_classes, y_pred_classes)
    accuracy_scores.append(accuracy)

# Print the results
print("Accuracy scores for each fold: ", accuracy_scores)
print("Mean Accuracy: ", np.mean(accuracy_scores))
print("Standard Deviation of Accuracy: ", np.std(accuracy_scores))